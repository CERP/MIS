{"ast":null,"code":"import _objectSpread from \"/home/taimur/dev/cerp/mis/dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport Dynamic from '@ironbay/dynamic';\nimport { MERGES, ON_CONNECT, ON_DISCONNECT, DELETES, QUEUE, CONFIRM_SYNC_DIFF, SNAPSHOT_DIFF } from '../actions/core';\n\nvar rootReducer = function rootReducer(state, action) {\n  switch (action.type) {\n    case ON_CONNECT:\n      {\n        return _objectSpread({}, state, {\n          connected: true\n        });\n      }\n\n    case ON_DISCONNECT:\n      {\n        return _objectSpread({}, state, {\n          connected: false\n        });\n      }\n\n    case MERGES:\n      {\n        var nextState = action.merges.reduce(function (agg, curr) {\n          return Dynamic.put(agg, curr.path, curr.value);\n        }, JSON.parse(JSON.stringify(state)));\n        return _objectSpread({}, nextState, {\n          accept_snapshot: false\n        });\n      }\n\n    case DELETES:\n      {\n        var state_copy = JSON.parse(JSON.stringify(state));\n        action.paths.forEach(function (a) {\n          return Dynamic.delete(state_copy, a.path);\n        });\n        return _objectSpread({}, state_copy, {\n          accept_snapshot: false\n        });\n      }\n\n    case QUEUE:\n      {\n        return _objectSpread({}, state, {\n          queued: _objectSpread({}, state.queued, action.payload)\n        });\n      }\n\n    case CONFIRM_SYNC_DIFF:\n      {\n        var diff_action = action;\n        console.log(\"confirm sync diff: \", Object.keys(diff_action.new_writes).length, \"changes synced\");\n        var newQ = Object.keys(state.queued).filter(function (t) {\n          console.log(state.queued[t].date, diff_action.date, state.queued[t].date - diff_action.date);\n          return state.queued[t].date > diff_action.date;\n        }).reduce(function (agg, curr) {\n          return Dynamic.put(agg, [\"queued\", state.queued[curr].action.path], state.queued[curr].action);\n        }, {});\n\n        if (Object.keys(diff_action.new_writes).length > 0) {\n          var _nextState = Object.values(diff_action.new_writes).reduce(function (agg, curr) {\n            if (curr.type === \"DELETE\") {\n              return Dynamic.delete(agg, curr.path);\n            }\n\n            return Dynamic.put(agg, curr.path, curr.value);\n          }, JSON.parse(JSON.stringify(state)));\n\n          return _objectSpread({}, _nextState, {\n            queued: newQ,\n            accept_snapshot: true,\n            last_snapshot: new Date().getTime()\n          });\n        }\n\n        return _objectSpread({}, state, {\n          queued: newQ,\n          accept_snapshot: true,\n          last_snapshot: new Date().getTime()\n        });\n      }\n\n    case SNAPSHOT_DIFF:\n      {\n        //@ts-ignore\n        var snapshot = action;\n        console.log(\"snapshot diff: \", Object.keys(snapshot.new_writes).length, \"changes broadcast\");\n\n        if (!state.accept_snapshot) {\n          return state;\n        }\n\n        if (Object.keys(snapshot.new_writes).length > 0) {\n          var _nextState2 = Object.values(snapshot.new_writes).reduce(function (agg, curr) {\n            if (curr.type === \"DELETE\") {\n              return Dynamic.delete(agg, curr.path);\n            }\n\n            return Dynamic.put(agg, curr.path, curr.value);\n          }, JSON.parse(JSON.stringify(state)));\n\n          return _objectSpread({}, _nextState2, {\n            last_snapshot: new Date().getTime()\n          });\n        }\n\n        return _objectSpread({}, state, {\n          last_snapshot: new Date().getTime()\n        });\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport default rootReducer;","map":{"version":3,"sources":["/home/taimur/dev/cerp/mis/dashboard/src/reducers/index.ts"],"names":["Dynamic","MERGES","ON_CONNECT","ON_DISCONNECT","DELETES","QUEUE","CONFIRM_SYNC_DIFF","SNAPSHOT_DIFF","rootReducer","state","action","type","connected","nextState","merges","reduce","agg","curr","put","path","value","JSON","parse","stringify","accept_snapshot","state_copy","paths","forEach","a","delete","queued","payload","diff_action","console","log","Object","keys","new_writes","length","newQ","filter","t","date","values","last_snapshot","Date","getTime","snapshot"],"mappings":";AAAA,OAAOA,OAAP,MAAoB,kBAApB;AAEA,SAASC,MAAT,EAA8BC,UAA9B,EAA0CC,aAA1C,EAAyDC,OAAzD,EAA8FC,KAA9F,EAAqGC,iBAArG,EAA+JC,aAA/J,QAAoL,iBAApL;;AAGA,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,KAAD,EAA0BC,MAA1B,EAAoE;AAEvF,UAAOA,MAAM,CAACC,IAAd;AAEC,SAAKT,UAAL;AACA;AACC,iCACIO,KADJ;AAECG,UAAAA,SAAS,EAAE;AAFZ;AAIA;;AAED,SAAKT,aAAL;AACA;AACC,iCACIM,KADJ;AAECG,UAAAA,SAAS,EAAE;AAFZ;AAIA;;AAED,SAAKX,MAAL;AACA;AACC,YAAMY,SAAS,GAAIH,MAAD,CAAwBI,MAAxB,CAA+BC,MAA/B,CAAsC,UAACC,GAAD,EAAMC,IAAN,EAAe;AACtE,iBAAOjB,OAAO,CAACkB,GAAR,CAAYF,GAAZ,EAAiBC,IAAI,CAACE,IAAtB,EAA4BF,IAAI,CAACG,KAAjC,CAAP;AACA,SAFiB,EAEfC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAed,KAAf,CAAX,CAFe,CAAlB;AAIA,iCACII,SADJ;AAECW,UAAAA,eAAe,EAAE;AAFlB;AAIA;;AAED,SAAKpB,OAAL;AACA;AACC,YAAMqB,UAAU,GAAGJ,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAed,KAAf,CAAX,CAAnB;AAECC,QAAAA,MAAD,CAA0BgB,KAA1B,CAAgCC,OAAhC,CAAwC,UAAAC,CAAC;AAAA,iBAAI5B,OAAO,CAAC6B,MAAR,CAAeJ,UAAf,EAA2BG,CAAC,CAACT,IAA7B,CAAJ;AAAA,SAAzC;AAEA,iCACIM,UADJ;AAECD,UAAAA,eAAe,EAAE;AAFlB;AAIA;;AAED,SAAKnB,KAAL;AACA;AACC,iCACII,KADJ;AAECqB,UAAAA,MAAM,oBACFrB,KAAK,CAACqB,MADJ,EAEDpB,MAAD,CAAwBqB,OAFtB;AAFP;AAOA;;AAED,SAAKzB,iBAAL;AACA;AACC,YAAM0B,WAAW,GAAGtB,MAApB;AAEAuB,QAAAA,OAAO,CAACC,GAAR,CACC,qBADD,EAECC,MAAM,CAACC,IAAP,CAAYJ,WAAW,CAACK,UAAxB,EAAoCC,MAFrC,EAGC,gBAHD;AAKA,YAAMC,IAAI,GAAGJ,MAAM,CAACC,IAAP,CAAY3B,KAAK,CAACqB,MAAlB,EACXU,MADW,CACJ,UAAAC,CAAC,EAAI;AACZR,UAAAA,OAAO,CAACC,GAAR,CAAYzB,KAAK,CAACqB,MAAN,CAAaW,CAAb,EAAgBC,IAA5B,EAAkCV,WAAW,CAACU,IAA9C,EAAoDjC,KAAK,CAACqB,MAAN,CAAaW,CAAb,EAAgBC,IAAhB,GAAuBV,WAAW,CAACU,IAAvF;AACA,iBAAOjC,KAAK,CAACqB,MAAN,CAAaW,CAAb,EAAgBC,IAAhB,GAAuBV,WAAW,CAACU,IAA1C;AACA,SAJW,EAKX3B,MALW,CAKJ,UAACC,GAAD,EAAMC,IAAN,EAAe;AACtB,iBAAOjB,OAAO,CAACkB,GAAR,CAAYF,GAAZ,EAAiB,CAAC,QAAD,EAAWP,KAAK,CAACqB,MAAN,CAAab,IAAb,EAAmBP,MAAnB,CAA0BS,IAArC,CAAjB,EAA6DV,KAAK,CAACqB,MAAN,CAAab,IAAb,EAAmBP,MAAhF,CAAP;AACA,SAPW,EAOT,EAPS,CAAb;;AASA,YAAGyB,MAAM,CAACC,IAAP,CAAYJ,WAAW,CAACK,UAAxB,EAAoCC,MAApC,GAA6C,CAAhD,EAAmD;AAClD,cAAMzB,UAAS,GAAGsB,MAAM,CAACQ,MAAP,CAAcX,WAAW,CAACK,UAA1B,EAChBtB,MADgB,CACT,UAACC,GAAD,EAAMC,IAAN,EAAe;AACtB,gBAAGA,IAAI,CAACN,IAAL,KAAc,QAAjB,EAA2B;AAC1B,qBAAOX,OAAO,CAAC6B,MAAR,CAAeb,GAAf,EAAoBC,IAAI,CAACE,IAAzB,CAAP;AACA;;AACD,mBAAOnB,OAAO,CAACkB,GAAR,CAAYF,GAAZ,EAAiBC,IAAI,CAACE,IAAtB,EAA4BF,IAAI,CAACG,KAAjC,CAAP;AACA,WANgB,EAMdC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAed,KAAf,CAAX,CANc,CAAlB;;AAQA,mCACII,UADJ;AAECiB,YAAAA,MAAM,EAAES,IAFT;AAGCf,YAAAA,eAAe,EAAE,IAHlB;AAICoB,YAAAA,aAAa,EAAE,IAAIC,IAAJ,GAAWC,OAAX;AAJhB;AAMA;;AAED,iCACIrC,KADJ;AAECqB,UAAAA,MAAM,EAAES,IAFT;AAGCf,UAAAA,eAAe,EAAE,IAHlB;AAICoB,UAAAA,aAAa,EAAE,IAAIC,IAAJ,GAAWC,OAAX;AAJhB;AAMA;;AAED,SAAKvC,aAAL;AACA;AACC;AACA,YAAMwC,QAAQ,GAAGrC,MAAjB;AACAuB,QAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BC,MAAM,CAACC,IAAP,CAAYW,QAAQ,CAACV,UAArB,EAAiCC,MAAhE,EAAwE,mBAAxE;;AAEA,YAAG,CAAC7B,KAAK,CAACe,eAAV,EAA2B;AAC1B,iBAAOf,KAAP;AACA;;AAED,YAAG0B,MAAM,CAACC,IAAP,CAAYW,QAAQ,CAACV,UAArB,EAAiCC,MAAjC,GAA0C,CAA7C,EAAgD;AAE/C,cAAMzB,WAAS,GAAGsB,MAAM,CAACQ,MAAP,CAAcI,QAAQ,CAACV,UAAvB,EAChBtB,MADgB,CACT,UAACC,GAAD,EAAMC,IAAN,EAAe;AACtB,gBAAGA,IAAI,CAACN,IAAL,KAAc,QAAjB,EAA2B;AAC1B,qBAAOX,OAAO,CAAC6B,MAAR,CAAeb,GAAf,EAAoBC,IAAI,CAACE,IAAzB,CAAP;AACA;;AACD,mBAAOnB,OAAO,CAACkB,GAAR,CAAYF,GAAZ,EAAiBC,IAAI,CAACE,IAAtB,EAA4BF,IAAI,CAACG,KAAjC,CAAP;AACA,WANgB,EAMdC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAed,KAAf,CAAX,CANc,CAAlB;;AAQA,mCACII,WADJ;AAEC+B,YAAAA,aAAa,EAAE,IAAIC,IAAJ,GAAWC,OAAX;AAFhB;AAKA;;AAED,iCACIrC,KADJ;AAECmC,UAAAA,aAAa,EAAE,IAAIC,IAAJ,GAAWC,OAAX;AAFhB;AAIA;;AAED;AACC,aAAOrC,KAAP;AAlIF;AAqIA,CAvID;;AAyIA,eAAeD,WAAf","sourcesContent":["import Dynamic from '@ironbay/dynamic'\n\nimport { MERGES, MergeAction, ON_CONNECT, ON_DISCONNECT, DELETES, DeletesAction, QueueAction, QUEUE, CONFIRM_SYNC_DIFF, ConfirmSyncAction, SnapshotDiffAction, SNAPSHOT_DIFF } from '../actions/core'\nimport { AnyAction } from 'redux';\n\nconst rootReducer = (state: RootReducerState, action : AnyAction) : RootReducerState => {\n\n\tswitch(action.type) {\n\n\t\tcase ON_CONNECT: \n\t\t{\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tconnected: true\n\t\t\t}\n\t\t}\n\n\t\tcase ON_DISCONNECT:\n\t\t{\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tconnected: false\n\t\t\t}\n\t\t}\n\n\t\tcase MERGES: \n\t\t{\n\t\t\tconst nextState = (action as MergeAction).merges.reduce((agg, curr) => {\n\t\t\t\treturn Dynamic.put(agg, curr.path, curr.value)\n\t\t\t}, JSON.parse(JSON.stringify(state)))\n\n\t\t\treturn {\n\t\t\t\t...nextState,\n\t\t\t\taccept_snapshot: false\n\t\t\t}\n\t\t}\n\n\t\tcase DELETES: \n\t\t{\n\t\t\tconst state_copy = JSON.parse(JSON.stringify(state)) as RootReducerState\n\n\t\t\t(action as DeletesAction).paths.forEach(a => Dynamic.delete(state_copy, a.path))\n\n\t\t\treturn {\n\t\t\t\t...state_copy,\n\t\t\t\taccept_snapshot: false\n\t\t\t}\n\t\t}\n\n\t\tcase QUEUE:\n\t\t{\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tqueued: {\n\t\t\t\t\t...state.queued,\n\t\t\t\t\t...(action as QueueAction).payload\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tcase CONFIRM_SYNC_DIFF:\n\t\t{\n\t\t\tconst diff_action = action as ConfirmSyncAction\n\n\t\t\tconsole.log(\n\t\t\t\t\"confirm sync diff: \",\n\t\t\t\tObject.keys(diff_action.new_writes).length,\n\t\t\t\t\"changes synced\")\n\t\t\t\n\t\t\tconst newQ = Object.keys(state.queued)\n\t\t\t\t.filter(t => {\n\t\t\t\t\tconsole.log(state.queued[t].date, diff_action.date, state.queued[t].date - diff_action.date)\n\t\t\t\t\treturn state.queued[t].date > diff_action.date\n\t\t\t\t})\n\t\t\t\t.reduce((agg, curr) => {\n\t\t\t\t\treturn Dynamic.put(agg, [\"queued\", state.queued[curr].action.path], state.queued[curr].action)\n\t\t\t\t}, {})\n\t\t\t\n\t\t\tif(Object.keys(diff_action.new_writes).length > 0) {\n\t\t\t\tconst nextState = Object.values(diff_action.new_writes)\n\t\t\t\t\t.reduce((agg, curr) => {\n\t\t\t\t\t\tif(curr.type === \"DELETE\") {\n\t\t\t\t\t\t\treturn Dynamic.delete(agg, curr.path)\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn Dynamic.put(agg, curr.path, curr.value)\n\t\t\t\t\t}, JSON.parse(JSON.stringify(state)))\n\n\t\t\t\treturn {\n\t\t\t\t\t...nextState,\n\t\t\t\t\tqueued: newQ,\n\t\t\t\t\taccept_snapshot: true,\n\t\t\t\t\tlast_snapshot: new Date().getTime()\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tqueued: newQ,\n\t\t\t\taccept_snapshot: true,\n\t\t\t\tlast_snapshot: new Date().getTime()\n\t\t\t}\n\t\t}\n\n\t\tcase SNAPSHOT_DIFF:\n\t\t{\n\t\t\t//@ts-ignore\n\t\t\tconst snapshot = action as SnapshotDiffAction;\n\t\t\tconsole.log(\"snapshot diff: \", Object.keys(snapshot.new_writes).length, \"changes broadcast\")\n\n\t\t\tif(!state.accept_snapshot) {\n\t\t\t\treturn state;\n\t\t\t}\n\n\t\t\tif(Object.keys(snapshot.new_writes).length > 0) {\n\n\t\t\t\tconst nextState = Object.values(snapshot.new_writes)\n\t\t\t\t\t.reduce((agg, curr) => {\n\t\t\t\t\t\tif(curr.type === \"DELETE\") {\n\t\t\t\t\t\t\treturn Dynamic.delete(agg, curr.path)\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn Dynamic.put(agg, curr.path, curr.value)\n\t\t\t\t\t}, JSON.parse(JSON.stringify(state))) as RootReducerState;\n\t\t\t\t\n\t\t\t\treturn {\n\t\t\t\t\t...nextState,\n\t\t\t\t\tlast_snapshot: new Date().getTime()\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tlast_snapshot: new Date().getTime()\n\t\t\t}\n\t\t}\n\n\t\tdefault:\n\t\t\treturn state\n\t}\n\n}\n\nexport default rootReducer;"]},"metadata":{},"sourceType":"module"}